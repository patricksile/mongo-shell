#!/usr/bin/env node

const co = require('co');
const vm = require('vm');
const fs = require('fs');
const Executor = require('../lib/executor');
const REPL = require('../lib/repl');
const ReplicaSet = require('../lib/rs');
const Sharded = require('../lib/sh');
const { MongoClient } = require('mongodb');
const Db = require('../lib/db');
const plugins = require('../lib/plugins');
const GlobalMethods = require('../lib/global_methods');
const Native = require('../lib/native');

// Command line options
const getUsage = require('command-line-usage');
const commandLineArgs = require('command-line-args');
const { cmdLineOptions, cmdLineSections } = require('../lib/command_line');

// Parse the command line
const options = commandLineArgs(cmdLineOptions)

// If user requested help information
if(options._all.help) {
  const usage = getUsage(cmdLineSections)
  console.log(usage)
  process.exit(0);
}

// Unknown
const unknown = options._unknown || [];

// Find any files in there
const files = unknown.filter(x => {
  return x.indexOf('.js') !== -1 && x !== __filename;
});

// Default uri connection string
let uri = 'mongodb://localhost:27017/test';

// Get the connection string if any specified
for (let i = 0; i < unknown.length; i++) {
  let arg = unknown[i].trim();
  // Test if this is a valid uri string
  if (typeof arg === 'string' && arg.indexOf('.js') === -1) {
    uri = arg.indexOf('mongodb://') === -1 ? `mongodb://${arg}` : arg;
  }
}

co(function*() {
  // Contains the mongodb client
  let client = null;

  // If --nodb is not defined
  if(!options._all.nodb) {
    client = yield MongoClient.connect(uri);
  }

  // Attempt to instantiate all the plugins
  const pluginInstances = [];
  // Go over all the plugins
  for (let name in plugins) {
    pluginInstances.push(new plugins[name](client));
  }

  // Init context
  const initContext = Object.assign({}, global, {});

  // Let plugin's decorate the context
  for (let i = 0; i < pluginInstances.length; i++) {
    yield pluginInstances[i].decorateContext(initContext);
  }

  // Create a context for execution
  let context = vm.createContext(initContext);
  // Internal state, not visible to repl
  let state = { client, context };

  // If --nodb is not defined
  if(!options._all.nodb) {
    // Default db
    context.db = Db.proxy(client.s.databaseName, state);
  }

  // Add the replicaset object
  context.rs = new ReplicaSet(state);
  // Add the sharded object
  context.sh = new Sharded(state, console);

  // Mixin naive methods
  Native.decorate(context, state);
  // Mix in global Methods
  GlobalMethods.decorate(context, state);
  // Add global special methods
  context.require = require;

  // Do we have files to execute
  if (files.length > 0) {
    // Execute each file
    const executor = new Executor();

    for (let i = 0; i < files.length; i++) {
      // Read the file
      const file = fs.readFileSync(files[i], 'utf8');
      // Let's execute the file
      yield executor.executeSync(file, context, {
        detectCallbacks: true
      });
    }

    // Shutdown mongodb connection
    client.close();
    // Cut short as we are done;
    return;
  }

  // Create a repl
  const replServer = new REPL(state, context, {
    plugins: pluginInstances
  });
  // Start the repl
  state.repl = replServer.start();
}).catch(err => {
  console.log(err);
  process.exit(0);
});

#!/usr/bin/env node

'use strict';
const vm = require('vm');
const fs = require('fs');
const os = require('os');
const Executor = require('../lib/executor');
const REPL = require('../lib/repl');
const ReplicaSet = require('../lib/rs');
const Sharded = require('../lib/sh');
const mongodb = require('mongodb');
const { MongoClient, Cursor, Collection, ObjectId } = require('mongodb');
const AggregationCursor = require('mongodb/lib/aggregation_cursor');
const MongoDb = require('mongodb').Db;
const Db = require('../lib/db');
const plugins = require('../lib/plugins');
const GlobalMethods = require('../lib/global_methods');
const Native = require('../lib/native');
const Assert = require('../lib/assert.js');
const Configuration = require('../lib/configuration');
const LegacyCollection = require('../lib/legacy/legacy_collection');
const LegacyCursor = require('../lib/legacy/legacy_cursor');
const LegacyGlobal = require('../lib/legacy/legacy_global');
const JsTest = require('../lib/legacy/jstest');
const packageJSON = require('../package.json');
const tty = require('tty');
const ExtJSON = require('mongodb-extjson');

// Command line options
const getUsage = require('command-line-usage');
const commandLineArgs = require('command-line-args');
const { cmdLineOptions, cmdLineSections, processor } = require('../lib/command_line');
const { palette } = require('../lib/colors');

// Parse the command line
const options = commandLineArgs(cmdLineOptions);
// Usage screen
const usage = getUsage(cmdLineSections);

// If user requested help information
if (options._all.help) {
  console.log(usage);
  process.exit(0);
}

let state;

// Unknown
const unknown = options._unknown || [];

// Add legacy methods to driver classes
LegacyCollection.mixin(Collection);
LegacyCursor.mixin(Cursor);
LegacyCursor.mixin(AggregationCursor);

MongoDb.prototype.forceReadMode = function() { /* no-op */ };
MongoDb.prototype.getDB = function(dbName) { return new Db(dbName, state); };

Object.defineProperty(ObjectId.prototype, 'str', { get: function() { return this.toString(); } });

// Find any files in there
const files = unknown.filter(x => {
  return x.indexOf('.js') !== -1 && x !== __filename;
});

// Default uri connection string
let uri = 'mongodb://localhost:27017/test';

// Get the connection string if any specified
for (let i = 0; i < unknown.length; i++) {
  let arg = unknown[i].trim();
  // Test if this is a valid uri string
  if (typeof arg === 'string' && arg.indexOf('.js') === -1) {
    uri = arg.indexOf('mongodb://') === -1 ? `mongodb://${arg}` : arg;
  }
}

// Read the entire stdin from the pipe and execute the
// piped in javascript
function executePipedFile(Executor, context, options) {
  return new Promise((resolve, reject) => {
    var stdin = process.openStdin();
    var data = "";

    stdin.on('data', function(chunk) { data += chunk; });
    stdin.on('error', function(err) { reject(err); });
    stdin.on('end', function() {
      Executor
        .executeSync(data, context, options)
        .then(resolve)
        .catch(reject);    
    });    
  });
}

// Get the uriObject and additional MongoClient options
const {
  uriObject, connectionOptions
} = processor(uri, console.log, options._all);
// Render as uri
uri = uriObject.toString();

(async function() {
  let client;
  let mongoRc;

  try {
    // Print out some information about the shell
    console.log(palette.string.green(`MongoDB Shell CLI version ${packageJSON.version}`));

    // Configuration file path
    const configurationPath = `${os.homedir()}/.mongo/configuration.json`;

    // Handles everything related to the shell configuration file
    const configuration = new Configuration(configurationPath);

    process.on('unhandledRejection', (reason, p) => {
      console.log(reason);
    });

    // If --nodb is not defined
    if (!options._all.nodb) {
      console.log(palette.string.bold(`connecting to: ${uri}`));
      // Ensure no buffer
      connectionOptions.poolSize = 1;
      connectionOptions.bufferMaxEntries = 0;
      // Connect to mongodb
      client = await MongoClient.connect(uri, connectionOptions);
    }

    // Did the user specify --norc
    if (!options._all.norc) {
      // Attempt to read the .mongorc.js file from $HOME
      try {
        mongoRc = fs.readFileSync(`${os.homedir()}/.mongorc.js`, 'utf8');
      } catch (err) {}
    }

    // Init context
    const initContext = Object.assign({}, global, {});

    // Mix in ExtJSON
    initContext.ExtJSON = new ExtJSON(mongodb);

    // JsTest (currently) static plugin
    JsTest.decorate(initContext);
    LegacyGlobal.decorate(initContext);

    // Create a context for execution
    let context = vm.createContext(initContext);
    // Internal state, not visible to repl
    state = { client, context, connectionOptions, configuration };

    // Attempt to instantiate all the plugins
    const _plugins = [];
    // Add plugins to state
    state.plugins = _plugins;

    // Load additional plugins loaded by the user
    try {
      // Get the plugin list
      const _configuration = await configuration.read();
      const configurationPlugins = _configuration.plugins;

      // For each of the plugins load and attempt to initialize
      for (let _module of configurationPlugins) {
        try {
          // Require the module
          const Plugin = require(_module[1]);
          // Add the plugin to the list
          _plugins.push(new Plugin(client, { log: console.log, state: state }));
        } catch(err) {
          console.error(`could not load plugin from ${_module[1]}, ${err.stack}`);
        }
      }
    } catch (err) {
      console.log(`failed to load file ${configurationPath}, error: [${err.message}]`);
    }

    // Let plugin's decorate the context
    for (let i = 0; i < _plugins.length; i++) {
      await _plugins[i].decorateContext(initContext);
    }

    // If --nodb is not defined
    if (!options._all.nodb) {
      // Default db
      context.db = Db.proxy(client.s.databaseName, state);
      // Query buildInfo to figure out if we are enterprise
      const buildInfo = await client.command({ buildInfo: true });
      // Are we enterprise, then set state to enterprise
      if (Array.isArray(buildInfo.modules) && buildInfo.modules.indexOf('enterprise') !== -1) {
        state.enterprise = true;
      }
    }

    // Add the replicaset object
    context.rs = new ReplicaSet(state, console);
    // Add the sharded object
    context.sh = new Sharded(state, console);

    // Mixin assertion methods
    Assert.decorate(context, state);
    // Mixin naive methods
    Native.decorate(context, state);
    // Mix in global Methods
    GlobalMethods.decorate(context, state);
    // Add global special methods
    context.require = require;

    // Do we have a .mongorc.js file
    // then evaluate it in the context of the context
    if (mongoRc) {
      // Let's execute the file
      await Executor.executeSync(mongoRc, context, {
        filename: `${os.homedir()}/.mongorc.js`,
        detectCallbacks: true
      });
    }

    // Do we have files to execute
    if (files.length > 0) {
      // Execute each file
      for (let i = 0; i < files.length; i++) {
        // Read the file
        const file = fs.readFileSync(files[i], 'utf8');
        // Let's execute the file
        await Executor.executeSync(file, context, {
          filename: files[i],
          detectCallbacks: true
        });

        // Did we receive an error?
        if (context.__executingError) {
          throw context.__executingError;
        }
      }

      if (!options._all.shell) {
        // Shutdown mongodb connection
        // Cut short as we are done;
        return await client.close();
      }
    } else if (options._all.eval) {
      // Do we have eval parameter, then execute it
      await Executor.executeSync(options._all.eval, context, {
        filename: 'global',
        detectCallbacks: true
      });

      if (!options._all.shell) {
        process.exit(0);
      }
    } else if (!tty.isatty()) {
      // User is piping in content to the console
      await executePipedFile(Executor, context, {
        filename: 'global',
        detectCallbacks: true        
      });
      // Exit process
      process.exit(0);
    }

    // Create a repl
    const replServer = new REPL(state, {
      plugins: _plugins, log: console.log
    });

    // Start the repl
    state.repl = await replServer.start();
  } catch (err) {
    console.log(err);
    if (!err.message.match(/failed to connect to server/)) {
      await client.close();
    }

    process.exit(1);
  }
})();

#!/usr/bin/env node

'use strict';
const vm = require('vm');
const fs = require('fs');
const os = require('os');
const Executor = require('../lib/executor');
const REPL = require('../lib/repl');
const ReplicaSet = require('../lib/rs');
const Sharded = require('../lib/sh');
const { MongoClient, Cursor, Collection } = require('mongodb');
const Db = require('../lib/db');
const plugins = require('../lib/plugins');
const GlobalMethods = require('../lib/global_methods');
const Native = require('../lib/native');
const Assert = require('../lib/assert.js');
const Configuration = require('../lib/configuration');

// Command line options
const getUsage = require('command-line-usage');
const commandLineArgs = require('command-line-args');
const { cmdLineOptions, cmdLineSections, processor } = require('../lib/command_line');

// Parse the command line
const options = commandLineArgs(cmdLineOptions)
// Usage screen
const usage = getUsage(cmdLineSections)

// If user requested help information
if(options._all.help) {
  console.log(usage)
  process.exit(0);
}

// Unknown
const unknown = options._unknown || [];

// monkey-patch `Cursor` for `itcount` support
Cursor.prototype.itcount = async function() {
  let count = 0;
  while (await this.hasNext()) {
    count++;
    await this.next();
  }

  return count;
};

// monkey-patch `Collection` for `getIndexKeys`
Collection.prototype.getIndexKeys = function() {
  return this.indexes().then(indexes => indexes.map(i => i.key));
};

// Find any files in there
const files = unknown.filter(x => {
  return x.indexOf('.js') !== -1 && x !== __filename;
});

// Default uri connection string
let uri = 'mongodb://localhost:27017/test';

// Get the connection string if any specified
for (let i = 0; i < unknown.length; i++) {
  let arg = unknown[i].trim();
  // Test if this is a valid uri string
  if (typeof arg === 'string' && arg.indexOf('.js') === -1) {
    uri = arg.indexOf('mongodb://') === -1 ? `mongodb://${arg}` : arg;
  }
}

// Get the uriObject and additional MongoClient options
const {
  uriObject, connectionOptions
} = processor(uri, options._all);
// Render as uri
uri = uriObject.toString();

(async function() {
  try {
    // Handles everything related to the shell configuration file
    const configuration = new Configuration(`${os.homedir()}/.mongo/configuration.json`);
    // Connect to mongodb
    const client = await MongoClient.connect(uri, connectionOptions);

    // Attempt to instantiate all the plugins
    const pluginInstances = [];
    // Go over all the plugins
    for (let name in plugins) {
      pluginInstances.push(new plugins[name](client));
    }

    // Load additional plugins loaded by the user
    try {
      // Get the plugin list
      const _configuration = await configuration.read();
      const plugins = _configuration.plugins;
      // For each of the plugins load and attempt to initialize
      for (var _module of plugins) {
        try {
          // Require the module
          const plugin = require(_module[1]);
          // Add the plugin to the list
          pluginInstances.push(new plugin(client));
        } catch(err) {
          console.error(`could not load plugin from ${_module[1]}`);
        }
      }
    } catch (err) {
      // console.log(err)
    }

    // console.log("------------------------------- load plugin")
    // console.dir(pluginInstances)

    // Init context
    const initContext = Object.assign({}, global, {});

    // Let plugin's decorate the context
    for (let i = 0; i < pluginInstances.length; i++) {
      await pluginInstances[i].decorateContext(initContext);
    }

    // Create a context for execution
    let context = vm.createContext(initContext);
    // Internal state, not visible to repl
    let state = { client, context, connectionOptions, configuration };

    // If --nodb is not defined
    if(!options._all.nodb) {
      // Default db
      context.db = Db.proxy(client.s.databaseName, state);
      // Query buildInfo to figure out if we are enterprise
      const buildInfo = await client.command({buildInfo:true});
      // Are we enterprise, then set state to enterprise
      if (Array.isArray(buildInfo.modules) && buildInfo.modules.indexOf('enterprise') != -1) {
        state.enterprise = true;
      }
    }

    // Default db
    context.db = Db.proxy(client.s.databaseName, state);
    // Add the replicaset object
    context.rs = new ReplicaSet(state);
    // Add the sharded object
    context.sh = new Sharded(state, console);

    // Mixin assertion methods
    Assert.decorate(context, state);
    // Mixin naive methods
    Native.decorate(context, state);
    // Mix in global Methods
    GlobalMethods.decorate(context, state);
    // Add global special methods
    context.require = require;

    // Do we have files to execute
    if (files.length > 0) {
      // Execute each file
      const executor = new Executor();

      for (let i = 0; i < files.length; i++) {
        // Read the file
        const file = fs.readFileSync(files[i], 'utf8');
        // Let's execute the file
        await executor.executeSync(file, context, {
          detectCallbacks: true
        });
      }

      // Shutdown mongodb connection
      client.close();
      // Cut short as we are done;
      return;
    }

    // Create a repl
    const replServer = new REPL(state, context, {
      plugins: pluginInstances
    });
    // Start the repl
    state.repl = replServer.start();
  } catch (err) {
    console.log(err);
    process.exit(0);
  }
})();
